pipeline {
    agent any

    environment {
        DOCKER_IMAGE    = 'sundance02/mem_med:latest'
        REMOTE_HOST     = 'fame050647@34.143.237.227'
        SSH_CREDENTIALS = 'ssh-prod_instance'
        DOCKER_CREDENTIALS = credentials('dockerhub')
        GIT_REPO        = 'https://github.com/Sundance02/Devtool_MEM-MED.git'
        PROJECT_DIR     = 'Devtool_Cloud_project'
    }

    stages {

        stage('Start Jenkins') {
            steps {
                sh 'echo Start Jenkins............'
            }
        }

        stage('Clone Git Repository') {
            steps {
                script {
                    sshagent([SSH_CREDENTIALS]) {
                        sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'rm -rf $PROJECT_DIR || true'"  // ลบ directory หากมีอยู่แล้ว
                        sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'git clone $GIT_REPO'"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sshagent([SSH_CREDENTIALS]) {
                        sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'cd $PROJECT_DIR && docker build -t $DOCKER_IMAGE .'"
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    sh 'echo $DOCKER_CREDENTIALS_PSW | docker login --username $DOCKER_CREDENTIALS_USR --password-stdin'
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKERHUB_PASSWORD', usernameVariable: 'DOCKERHUB_USER')]) {
                    sh 'echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USER --password-stdin'
                }
            }
        }

        stage('Run Docker Compose on Remote Server') {
            steps {
                script {
                    sshagent([SSH_CREDENTIALS]) {
                        sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'cd $PROJECT_DIR && docker-compose down || true'"
                        sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'cd $PROJECT_DIR && docker-compose up -d'"
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'docker logout'
        }
    }
}
